---
variables:
  TF_ROOT: ${CI_PROJECT_DIR}/terraform
  TF_HTTP_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${CI_COMMIT_BRANCH}
  TF_STATE_NAME: ${CI_COMMIT_BRANCH}
  TF_CACHE_KEY: ${CI_COMMIT_BRANCH}
  TF_VAR_branch: ${CI_COMMIT_BRANCH}
cache:
  key: "${TF_ROOT}"
  paths:
    - ${TF_ROOT}/.terraform/
    - ${TF_ROOT}/.terraform.lock.hcl
# Test
before_script:
  - cd ${TF_ROOT}
  - export TF_VAR_subnet="$(python3 helpers/subnet_prefix.py)"
  - export TF_VAR_subnet_list="$(python3 helpers/subnet_list.py)"

stages:
  - prepare-tf
  - validate-tf
  - build-tf
  - deploy-tf
  - ansible
  - destroy-tf

.global:
  tags:
    - shell
  rules:
    - changes:
        - docs/*
        - .vscode/*
        - .github/*
        - README.md
        - LICENSE
      when: never
    - when: on_success

init:
  stage: prepare-tf
  extends: .global
  environment:
    name: production
  script:
    - terraform init
    - terraform validate
  rules:
    - when: on_success

validate:
  extends: .global
  environment:
    name: production
  stage: validate-tf
  script:
    - terraform validate
  rules:
    - when: on_success

plan:
  stage: build-tf
  extends: .global
  environment:
    name: production
  artifacts:
    name: plan
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json
  script:
    - terraform plan
  rules:
    - when: on_success

create:
  stage: deploy-tf
  extends: .global
  environment:
    name: production
  dependencies:
    - plan
  script:
    - terraform apply -auto-approve
  rules:
    - if: '$TF_VAR_subnet != ""'
      when: on_success
    - when: never
  artifacts:
    paths:
      - ${TF_ROOT}/.terraform
      - ${TF_ROOT}/hosts.ini

# Ansible section here
run-playbooks:
  stage: ansible
  extends: .global
  environment:
    name: production
  dependencies:
    - create
  script:
    - cd ${CI_PROJECT_DIR}/ansible
    - cp /home/gitlab-runner/.vault-password ${CI_PROJECT_DIR}/ansible
    - ansible-galaxy install -r requirements.yaml
    - ansible-galaxy collection install -r requirements.yaml
    - ansible-playbook -i ${TF_ROOT}/hosts.ini --vault-password-file ./.vault-password playbook.yaml
  rules:
    - if: '$TF_VAR_subnet != ""'
      when: on_success
    - when: never

destroy:
  stage: destroy-tf
  extends: .global
  environment:
    name: production
  dependencies:
    - create
  script:
    - terraform destroy -auto-approve
  rules:
    - if: '$TF_VAR_subnet != "" && $CI_COMMIT_BRANCH != "prod"'
      when: manual
    - when: never
  artifacts:
    paths:
      - ${TF_ROOT}/.terraform
